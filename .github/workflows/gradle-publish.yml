name: Gradle Package

on:
  push:
    branches: [ "main" ]

env:
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  BASE_URL: https://joseonpaldo.site

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get public IP address
        id: get_ip
        run: |
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
      
      - name: Create .env file
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" > .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "BASE_URL=https://joseonpaldo.site" >> .env
    
      - name: Get Hash
        id: get_hash
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Verify Java version
        run: java -version

      - name: Set up Naver CLI
        run: |
          cd ~
          curl -L https://www.ncloud.com/api/support/download/files/cli/CLI_1.1.20_20240620.zip -o CLI_1.1.20_20240620.zip
          unzip CLI_1.1.20_20240620.zip
          cd ./CLI_1.1.20_20240620/cli_linux
          chmod +x ncloud
          echo "${{ secrets.NAVER_ACESSKEY }}" > input.txt
          echo "${{ secrets.NAVER_SECRETKEY }}" >> input.txt
          echo "" >> input.txt
          cat input.txt | ./ncloud configure
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
          
      - name: Build with Gradle
        run: ./gradlew build --scan

      - name: Login to Docker registry(naver)
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.NAVER_ACESSKEY }}
          password: ${{ secrets.NAVER_SECRETKEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/joseonpaldo-boot:${{ env.COMMIT_HASH }}

      - name: Add ACG rule for deploy server
        run: |
          cd ~/CLI_1.1.20_20240620/cli_linux
          ./ncloud vserver addAccessControlGroupInboundRule --regionCode KR --vpcNo ${{ secrets.NAVER_VPC }} --accessControlGroupNo ${{ secrets.NAVER_ACG_NO }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ env.PUBLIC_IP }}/32', portRange='22'"
          sleep 10
          ./ncloud vserver addAccessControlGroupInboundRule --regionCode KR --vpcNo ${{ secrets.NAVER_VPC }} --accessControlGroupNo ${{ secrets.NAVER_ACG_NO2 }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ env.PUBLIC_IP }}/32', portRange='3306'"
          sleep 10
          ./ncloud vserver addAccessControlGroupOutboundRule --regionCode KR --vpcNo ${{ secrets.NAVER_VPC }} --accessControlGroupNo ${{ secrets.NAVER_ACG_NO2 }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ env.PUBLIC_IP }}/32', portRange='3306'"


      - name: SSH and deploy to server 001
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP_001 }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker login -u ${{ secrets.NAVER_ACESSKEY }} -p ${{ secrets.NAVER_SECRETKEY }} ${{ secrets.REGISTRY_URL }}
            docker pull ${{ secrets.REGISTRY_URL }}/joseonpaldo-boot:${{ env.COMMIT_HASH }}
            docker stop joseonpaldo-backend || true
            docker rm joseonpaldo-backend || true
            docker run -d -p 8080:8080 --name joseonpaldo-backend ${{ secrets.REGISTRY_URL }}/joseonpaldo-boot:${{ env.COMMIT_HASH }}
            docker images --format '{{.Repository}}:{{.Tag}}' | grep joseonpaldo-boot | grep -v "${{ env.COMMIT_HASH }}" | xargs -r docker rmi || true

      - name: Wait for 90sec
        run: sleep 90
      
      - name: SSH and deploy to server 002
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP_002 }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker login -u ${{ secrets.NAVER_ACESSKEY }} -p ${{ secrets.NAVER_SECRETKEY }} ${{ secrets.REGISTRY_URL }}
            docker pull ${{ secrets.REGISTRY_URL }}/joseonpaldo-boot:${{ env.COMMIT_HASH }}
            docker stop joseonpaldo-backend || true
            docker rm joseonpaldo-backend || true
            docker run -d -p 8080:8080 --name joseonpaldo-backend ${{ secrets.REGISTRY_URL }}/joseonpaldo-boot:${{ env.COMMIT_HASH }}
            docker images --format '{{.Repository}}:{{.Tag}}' | grep joseonpaldo-boot | grep -v "${{ env.COMMIT_HASH }}" | xargs -r docker rmi || true
      
      - name: Remove ACG inbound rule created
        run: |
          cd ~/CLI_1.1.20_20240620/cli_linux
          ./ncloud vserver removeAccessControlGroupInboundRule --regionCode KR --vpcNo ${{ secrets.NAVER_VPC }} --accessControlGroupNo ${{ secrets.NAVER_ACG_NO }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ env.PUBLIC_IP }}/32', portRange='22'"
          sleep 10
          ./ncloud vserver removeAccessControlGroupInboundRule --regionCode KR --vpcNo ${{ secrets.NAVER_VPC }} --accessControlGroupNo ${{ secrets.NAVER_ACG_NO2 }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ env.PUBLIC_IP }}/32', portRange='3306'"
          sleep 10
          ./ncloud vserver removeAccessControlGroupOutboundRule --regionCode KR --vpcNo ${{ secrets.NAVER_VPC }} --accessControlGroupNo ${{ secrets.NAVER_ACG_NO2 }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ env.PUBLIC_IP }}/32', portRange='3306'"

